{"version":3,"file":"index.js","sources":["../src/classes/XYPoint.js","../src/classes/XYUtil.js","../src/classes/ColorUtil.js","../src/index.js"],"sourcesContent":["export default class XYPoint {\n    constructor( x, y ) {\n        this.x = x;\n        this.y = y;\n    }\n}\n","import XYPoint from './XYPoint';\n\n/*\n * XY utilities. Many of the methods, as marked, were adapted from Bryan Johnson's work (http://bit.ly/2bHHjxd)\n */\n\nexport default class XYUtil {\n\n    /**\n     * Returns the cross product of two XYPoints.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {XYPoint} p1 Point 1.\n     * @param {XYPoint} p2 Point 2.\n     * @return {Number} Cross-product of the two XYPoints provided.\n     */\n    static crossProduct( p1, p2 ) {\n        return ( p1.x * p2.y - p1.y * p2.x );\n    }\n\n    /**\n     * Find the closest point on a line. This point will be reproducible by a Hue lamp.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {XYPoint} start The point where the line starts.\n     * @param {XYPoint} end The point where the line ends.\n     * @param {XYPoint} point The point which is close to the line.\n     * @return {XYPoint} A point that is on the line, and closest to the XYPoint provided.\n     */\n    static getClosestPointOnLine( start, end, point ) {\n        const AP = new XYPoint( point.x - start.x, point.y - start.y );\n        const AB = new XYPoint( end.x - start.x, end.y - start.y );\n        const ab2 = AB.x * AB.x + AB.y * AB.y;\n        const ap_ab = AP.x * AB.x + AP.y * AB.y;\n        let t = ap_ab / ab2;\n\n        if ( t < 0.0 ) {\n            t = 0.0;\n        } else if ( t > 1.0 ) {\n            t = 1.0;\n        }\n\n        return new XYPoint( start.x + AB.x * t, start.y + AB.y * t );\n    }\n\n    /**\n     * Returns the distance between two XYPoints.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {XYPoint} p1 The first point.\n     * @param {XYPoint} p2 The second point.\n     * @return {Number} The distance between points one and two.\n     */\n    static getDistanceBetweenTwoPoints( p1, p2 ) {\n\t\t// horizontal difference\n        const dx = p1.x - p2.x;\n        // vertical difference\n        const dy = p1.y - p2.y;\n\n        return Math.sqrt( dx * dx + dy * dy );\n    }\n\n}\n","import XYPoint from './XYPoint';\nimport XYUtil from './XYUtil';\n\nexport const Red = new XYPoint( 0.675, 0.322 ),\n    Lime = new XYPoint( 0.4091, 0.518 ),\n    Blue = new XYPoint( 0.167, 0.04 );\n\n/**\n * Fit a number into a range from 0 to `max`.\n * @param {number} number\n * @param {number} max\n * @returns {number}\n */\nconst fitIntoRange = ( number, max ) => {\n    // Convert the hue to a valid value, 0 to 360.\n    if ( number >= max ) {\n        number = number % max;\n    } else if ( number < 0 ) {\n        number = number + ( max * Math.floor( number / ( 0 - max ) ) );\n    }\n    return number;\n};\n\n/*\n * Color utilities. Many of the methods, as marked, were adapted from Bryan Johnson's work (http://bit.ly/2bHHjxd),\n * which itself was derived from Q42's C# Hue library (http://bit.ly/2bye7ul).\n */\n\nexport default class ColorUtil {\n\n    /**\n     * Check if the point can be recreated by a Hue lamp.\n     *\n     * @author Q42 [original C#] Bryan Johnson [original JavaScript], Todd Dukart [conversion]\n     *\n     * @param {XYPoint} point The point to test\n     * @returns {boolean} Flag indicating if the point is within reproducible range.\n     */\n    static isInLampsReach( point ) {\n        const v1 = new XYPoint( Lime.x - Red.x, Lime.y - Red.y );\n        const v2 = new XYPoint( Blue.x - Red.x, Blue.y - Red.y );\n        const q = new XYPoint( point.x - Red.x, point.y - Red.y );\n        const s = XYUtil.crossProduct( q, v2 ) / XYUtil.crossProduct( v1, v2 );\n        const t = XYUtil.crossProduct( v1, q ) / XYUtil.crossProduct( v1, v2 );\n\n        return ( s >= 0.0 ) && ( t >= 0.0 ) && ( s + t <= 1.0 );\n    }\n\n    /**\n     * Get the closest point that can be recreated by a Hue lamp.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {XYPoint} point The point to test\n     * @returns {XYPoint} The closest point that can be recreated by a Hue lamp.\n     */\n    static getClosestReproduciblePoint( point ) {\n        // Color is unreproducible, find the closest point on each line in the CIE 1931 'triangle'.\n        const pAB = XYUtil.getClosestPointOnLine( Red, Lime, point );\n        const pAC = XYUtil.getClosestPointOnLine( Blue, Red, point );\n        const pBC = XYUtil.getClosestPointOnLine( Lime, Blue, point );\n\n        // Get the distances per point and see which point is closer to our Point.\n        const dAB = XYUtil.getDistanceBetweenTwoPoints( point, pAB );\n        const dAC = XYUtil.getDistanceBetweenTwoPoints( point, pAC );\n        const dBC = XYUtil.getDistanceBetweenTwoPoints( point, pBC );\n        let lowest = dAB;\n        let closestPoint = pAB;\n\n\n        if ( dAC < lowest ) {\n            lowest = dAC;\n            closestPoint = pAC;\n        }\n\n        if ( dBC < lowest ) {\n            lowest = dBC;\n            closestPoint = pBC;\n        }\n\n        return closestPoint;\n    }\n\n    /**\n     * Parses a valid hex color string and returns the Red RGB integer value.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {String} hex Hex color string.\n     * @return {Number} Red integer value.\n     */\n    static hexToRed( hex ) {\n        return parseInt( hex.substring( 0, 2 ), 16 );\n    }\n\n    /**\n     * Parses a valid hex color string and returns the Green RGB integer value.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {String} hex Hex color string.\n     * @return {Number} Green integer value.\n     */\n    static hexToGreen( hex ) {\n        return parseInt( hex.substring( 2, 4 ), 16 );\n    }\n\n    /**\n     * Parses a valid hex color string and returns the Blue RGB integer value.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {String} hex Hex color string.\n     * @return {Number} Blue integer value.\n     */\n    static hexToBlue( hex ) {\n        return parseInt( hex.substring( 4, 6 ), 16 );\n    }\n\n    /**\n     * Converts a valid hex color string to an RGB array.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {String} hex Hex color String (e.g. FF00FF)\n     * @return {Array} Array containing R, G, B values\n     */\n    static hexToRGB( hex ) {\n        hex = hex.replace( /[^0-9a-f]/g, '' );\n        return [\n            ColorUtil.hexToRed( hex ),\n            ColorUtil.hexToGreen( hex ),\n            ColorUtil.hexToBlue( hex )\n        ];\n    }\n\n    /**\n     * Converts an RGB component to a hex string.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {Number} component RGB value, integer between 0 and 255.\n     * @returns {String} Hex value string (e.g. FF)\n     */\n    static componentToHex( component ) {\n        const hex = component.toString( 16 );\n        return hex.length === 1 ? '0' + hex : hex;\n    }\n\n    /**\n     * Converts RGB color components to a valid hex color string.\n     *\n     * @author Bryan Johnson [original], Todd Dukart [conversion]\n     *\n     * @param {Number} red RGB red value, integer between 0 and 255.\n     * @param {Number} green RGB green value, integer between 0 and 255.\n     * @param {Number} blue RGB blue value, integer between 0 and 255.\n     * @returns {String} Hex color string (e.g. FF0000)\n     */\n    static rgbToHex( red, green, blue ) {\n        const redHex = ColorUtil.componentToHex( red );\n        const greenHex = ColorUtil.componentToHex( green );\n        const blueHex = ColorUtil.componentToHex( blue );\n        return `${ redHex }${ greenHex }${ blueHex }`;\n    }\n\n    /**\n     * Converts HSB to RGB. Borrowed from https://www.cs.rit.edu/~ncs/color/t_convert.html\n     * @param {number} hue        Hue, integer between 0 and 65535.\n     * @param {number} saturation Saturation, integer between 0 and 254.\n     * @param {number} brightness Brightness, integer between 0 and 254.\n     * @returns {number[]} Array of [red, green, blue]\n     */\n    static hsbToRgb( hue, saturation, brightness ) {\n        let red;\n        let green;\n        let blue;\n\n        hue = fitIntoRange( hue, 65535 );\n\n        if ( 0 === saturation ) {\n            red = green = blue = brightness;\n        } else {\n            let huePartial = hue / ( 65535 / 6 ); // There are six \"sectors\" in the hue, corresponding to the six primary colors.\n            let sector = Math.floor( huePartial );\n            let fractionalHue = huePartial - sector;\n            let p = ( brightness / 254 ) * ( 254 - saturation );\n            let q = ( brightness / 254 ) * ( 254 - saturation * fractionalHue );\n            let t = ( brightness / 254 ) * ( 254 - saturation * ( 1 - fractionalHue ) );\n\n            switch ( sector ) {\n                case 0:\n                    red = brightness;\n                    green = t;\n                    blue = p;\n                    break;\n                case 1:\n                    red = q;\n                    green = brightness;\n                    blue = p;\n                    break;\n                case 2:\n                    red = p;\n                    green = brightness;\n                    blue = t;\n                    break;\n                case 3:\n                    red = p;\n                    green = q;\n                    blue = brightness;\n                    break;\n                case 4:\n                    red = t;\n                    green = p;\n                    blue = brightness;\n                    break;\n                case 5:\n                    red = brightness;\n                    green = p;\n                    blue = q;\n                    break;\n            }\n\n        }\n\n        return [ Math.round( red ), Math.round( green ), Math.round( blue ) ];\n    }\n\n    /**\n     * Converts RGB to HSB. Adapted from https://www.cs.rit.edu/~ncs/color/t_convert.html\n     * @param {number} red   The red value, from 0 to 255.\n     * @param {number} green The green value, from 0 to 255.\n     * @param {number} blue  The blue value, from 0 to 255.\n     * @returns {number[]} Array of [hue, saturation, brightness]. For shades of gray, hue will be undefined.\n     */\n    static rgbToHsb( red, green, blue ) {\n        let hue;\n        let saturation;\n        let brightness;\n\n        const min = Math.min( red, green, blue );\n        const max = Math.max( red, green, blue );\n        brightness = max;\n        const delta = max - min;\n\n        if ( max <= 0 ) {\n            // It's black.\n            hue = undefined; // Technically, black has no hue.\n            saturation = brightness = 0;\n        } else if ( min >= 254 ) {\n            //It's white.\n            hue = undefined; // Technically, white has no hue.\n            saturation = 0;\n            brightness = 254;\n        } else {\n            saturation = delta / max * 254;\n            if ( saturation === 0 ) {\n                hue = undefined; // Pure gray, so there's no hue.\n            } else {\n                if ( red === max ) {\n                    hue = ( green - blue ) / delta;\n                } else if ( green === max ) {\n                    hue = 2 + ( blue - red ) / delta;\n                } else {\n                    hue = 4 + ( red - green ) / delta;\n                }\n\n                hue = hue * ( 65535 / 6 ); // convert to Hue's 0-65535 range\n                hue = fitIntoRange( hue, 65535 );\n                hue = Math.round( hue );\n            }\n        }\n\n        saturation = Math.min( Math.round( saturation ), 254 );\n        brightness = Math.min( Math.round( brightness ), 254 );\n\n        return [ hue, saturation, brightness ];\n    }\n\n    /**\n     * Returns a rgb array for given x, y values. Not actually an inverse of\n     * getXYPointFromRGB. Implementation of the instructions found on the\n     * Philips Hue iOS SDK docs: http://goo.gl/kWKXKl\n     *\n     * @author Q42 [original C#] Bryan Johnson [original JavaScript], Todd Dukart [conversion]\n     *\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} brightness\n     * @returns {Number[]}\n     */\n    static getRGBFromXYAndBrightness( x, y, brightness ) {\n        let xyPoint = new XYPoint( x, y );\n\n        if ( brightness === undefined ) {\n            brightness = 254;\n        }\n\n        // Check if the xy value is within the color gamut of the lamp.\n        // If not continue with step 2, otherwise step 3.\n        // We do this to calculate the most accurate color the given light can actually do.\n        if ( !ColorUtil.isInLampsReach( xyPoint ) ) {\n            // Calculate the closest point on the color gamut triangle\n            // and use that as xy value See step 6 of color to xy.\n            xyPoint = ColorUtil.getClosestReproduciblePoint( xyPoint );\n        }\n\n        // Calculate XYZ values Convert using the following formulas:\n        const Y = brightness / 254;\n        const X = ( Y / xyPoint.y ) * xyPoint.x;\n        const Z = ( Y / xyPoint.y ) * ( 1 - xyPoint.x - xyPoint.y );\n\n        // Convert to RGB using Wide RGB D65 conversion.\n        let rgb = [\n            X * 1.612 - Y * 0.203 - Z * 0.302,\n            -X * 0.509 + Y * 1.412 + Z * 0.066,\n            X * 0.026 - Y * 0.072 + Z * 0.962\n        ];\n\n        // Apply reverse gamma correction.\n        rgb = rgb.map( function ( x ) {\n            return ( x <= 0.0031308 ) ? ( 12.92 * x ) : ( ( 1.0 + 0.055 ) * Math.pow( x, ( 1.0 / 2.4 ) ) - 0.055 );\n        } );\n\n        // Bring all negative components to zero.\n        rgb = rgb.map( function ( x ) {\n            return Math.max( 0, x );\n        } );\n\n        // If one component is greater than 1, weight components by that value.\n        const max = Math.max( rgb[ 0 ], rgb[ 1 ], rgb[ 2 ] );\n        if ( max > 1 ) {\n            rgb = rgb.map( function ( x ) {\n                return x / max;\n            } );\n        }\n\n        rgb = rgb.map( function ( x ) {\n            return Math.floor( x * 255 );\n        } );\n\n        return rgb;\n    }\n\n    /**\n     * Convert a mired color temperature to RGB. Adapted from http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/.\n     * @param {number} miredColorTemperature\n     * @param {number} brightness\n     * @returns {number[]}\n     */\n    static miredToRgb( miredColorTemperature, brightness ) {\n        const kelvin = 1000000 / miredColorTemperature;\n        let red;\n        let green;\n        let blue;\n\n        // Calculate each color separately. Red:\n        if ( kelvin < 6600 ) {\n            red = 255;\n        } else {\n            red = ( kelvin / 100 ) - 60;\n            red = 329.698727446 * red ^ ( -0.1332047592 );\n        }\n\n        // Green:\n        if ( kelvin < 6600 ) {\n            green = kelvin / 100;\n            green = 99.4708025861 * Math.log( green ) - 161.1195681661\n        } else {\n            green = ( kelvin / 100 ) - 60;\n            green = 288.1221695283 * green ^ ( -0.0755148492 );\n        }\n\n        // Blue:\n        if ( kelvin >= 6600 ) {\n            blue = 255;\n        } else {\n            blue = kelvin - 10;\n            blue = 138.5177312231 * Math.log( blue ) - 305.0447927307;\n        }\n\n        let result = [ red, green, blue ];\n        result = result.map( ( value ) => {\n            value = Math.min( 255, value );\n            value = Math.max( 0, value );\n            value = value * ( brightness / 254 );\n            return Math.round( value );\n        } );\n\n        return result;\n    }\n\n    /**\n     * Returns an XYPoint object containing the closest available CIE 1931\n     * coordinates based on the RGB input values.\n     *\n     * @author Q42 [original C#] Bryan Johnson [original JavaScript], Todd Dukart [conversion]\n     *\n     * @param {Number} red RGB red value, integer between 0 and 255.\n     * @param {Number} green RGB green value, integer between 0 and 255.\n     * @param {Number} blue RGB blue value, integer between 0 and 255.\n     * @return {XYPoint} CIE 1931 XY coordinates, corrected for reproducibility.\n     */\n    static getXYPointFromRGB( red, green, blue ) {\n\n        const r = ( red > 0.04045 ) ? Math.pow( ( red + 0.055 ) / ( 1.0 + 0.055 ), 2.4 ) : ( red / 12.92 );\n        const g = ( green > 0.04045 ) ? Math.pow( ( green + 0.055 ) / ( 1.0 + 0.055 ), 2.4 ) : ( green / 12.92 );\n        const b = ( blue > 0.04045 ) ? Math.pow( ( blue + 0.055 ) / ( 1.0 + 0.055 ), 2.4 ) : ( blue / 12.92 );\n        const X = r * 0.4360747 + g * 0.3850649 + b * 0.0930804;\n        const Y = r * 0.2225045 + g * 0.7168786 + b * 0.0406169;\n        const Z = r * 0.0139322 + g * 0.0971045 + b * 0.7141733;\n        let cx = X / ( X + Y + Z );\n        let cy = Y / ( X + Y + Z );\n\n        cx = isNaN( cx ) ? 0.0 : cx;\n        cy = isNaN( cy ) ? 0.0 : cy;\n\n        //Check if the given XY value is within the colourreach of our lamps.\n        const xyPoint = new XYPoint( cx, cy );\n        const inReachOfLamps = ColorUtil.isInLampsReach( xyPoint );\n\n        if ( !inReachOfLamps ) {\n            const closestPoint = ColorUtil.getClosestReproduciblePoint( xyPoint );\n            cx = closestPoint.x;\n            cy = closestPoint.y;\n        }\n\n        return new XYPoint( cx, cy );\n    }\n\n    /**\n     * Get the approximate luminance from RGB\n     *\n     * @author Todd Dukart\n     *\n     * @param {Number} red\n     * @param {Number} green\n     * @param {Number} blue\n     * @returns {Number}\n     */\n    static getBrightnessFromRgb( red, green, blue ) {\n        let brightness = parseInt( 0.2126 * red + 0.7152 * green + 0.0722 * blue );\n        brightness = Math.min( 254, brightness );\n        brightness = Math.max( 1, brightness );\n        return brightness;\n    }\n\n}\n","import ColorUtil from './classes/ColorUtil';\n\nconst COLOR_RGB = 'rgb';\nconst COLOR_CIE = 'cie';\nconst COLOR_CT = 'ct';\nconst COLOR_HSB = 'hsb';\n\nexport default class HueColor {\n\n    /**\n     * Constructs a new Color. Should usually be called by one of the static from___ methods.\n     */\n    constructor() {\n        this.red = null;\n        this.green = null;\n        this.blue = null;\n        this.x = null;\n        this.y = null;\n        this.brightness = null;\n        this.hue = null;\n        this.saturation = null;\n        this.temperature = null;\n        this.originalColor = null;\n    }\n\n    /**\n     * Constructs a new Color given red, green, and blue.\n     * @param {Number} red   The red value, from 0 to 255.\n     * @param {Number} green The green value, from 0 to 255.\n     * @param {Number} blue  The blue value, from 0 to 255.\n     * @returns {HueColor}\n     */\n    static fromRgb( red, green, blue ) {\n        const color = new HueColor;\n        color.red = red;\n        color.green = green;\n        color.blue = blue;\n        color.originalColor = COLOR_RGB;\n        return color;\n    }\n\n    /**\n     * Constructs a new Color given a CIE point and brightness.\n     * @param {Number} x          X coordinate.\n     * @param {Number} y          Y coordinate.\n     * @param {Number} brightness Brightness, from 0 to 254.\n     * @returns {HueColor}\n     */\n    static fromCIE( x, y, brightness ) {\n        const color = new HueColor;\n        color.x = x;\n        color.y = y;\n        color.brightness = brightness;\n        color.originalColor = COLOR_CIE;\n        return color;\n    }\n\n    static fromCt( colorTemperature, brightness ) {\n        const color = new HueColor;\n        color.temperature = colorTemperature;\n        color.brightness = brightness;\n        color.originalColor = COLOR_CT;\n        return color;\n    }\n\n    /**\n     * Constructs a new Color given a CSS-style hex code.\n     * @param {String} hex The hex code.\n     * @returns {HueColor}\n     */\n    static fromHex( hex ) {\n        const rgb = ColorUtil.hexToRGB( hex );\n        return HueColor.fromRgb( rgb[ 0 ], rgb[ 1 ], rgb[ 2 ] );\n    }\n\n    /**\n     * Constructs a new Color given HSB values.\n     * @param {number} hue        Integer, 0 to 65535\n     * @param {number} saturation Integer, 0 to 254\n     * @param {number} brightness Integer, 0 to 254\n     * @returns {HueColor}\n     */\n    static fromHsb( hue, saturation, brightness ) {\n        const color = new HueColor;\n        color.hue = hue;\n        color.saturation = saturation;\n        color.brightness = brightness;\n        color.originalColor = COLOR_HSB;\n        return color;\n    }\n\n    /**\n     * Converts the color to RGB. Note that the CIE-to-RGB conversion is necessarily approximate.\n     * @returns {Number[]} Red, green, and blue components.\n     */\n    toRgb() {\n        let rgb = [ null, null, null ];\n        if ( null === this.red || null === this.green || null === this.blue ) {\n            switch ( this.originalColor ) {\n                case COLOR_CIE:\n                    rgb = ColorUtil.getRGBFromXYAndBrightness( this.x, this.y, this.brightness );\n                    break;\n                case COLOR_HSB:\n                    rgb = ColorUtil.hsbToRgb( this.hue, this.saturation, this.brightness );\n                    break;\n                case COLOR_CT:\n                    rgb = ColorUtil.miredToRgb( this.temperature, this.brightness );\n                    break;\n                default:\n                    throw new Error( 'Unable to process color, original is ' + this.originalColor );\n            }\n        }\n\n        if ( null !== rgb[ 0 ] ) {\n            this.red = rgb[ 0 ];\n            this.green = rgb[ 1 ];\n            this.blue = rgb[ 2 ];\n        }\n\n        return [ this.red, this.green, this.blue ];\n    }\n\n    /**\n     * Converts the color to a CSS-style hex string. Note that the CIE-to-RGB conversion is necessarily approximate.\n     * @returns {String}\n     */\n    toHex() {\n        const rgb = this.toRgb();\n        return ColorUtil.rgbToHex( rgb[ 0 ], rgb[ 1 ], rgb[ 2 ] );\n    }\n\n    /**\n     * Converts the color to a CIE color that Hue lamps are capable of showing. Note that the RGB-to-CIE conversion is\n     * necessarily approximate.\n     * @returns {Number[]} X, Y, and brightness components.\n     */\n    toCie() {\n        let cie = { x: null, y: null };\n        let rgb;\n        if ( null === this.x || null === this.y || null === this.brightness ) {\n            switch ( this.originalColor ) {\n                case COLOR_RGB:\n                    cie = ColorUtil.getXYPointFromRGB( this.red, this.green, this.blue );\n                    this.brightness = ColorUtil.getBrightnessFromRgb( this.red, this.green, this.blue );\n                    break;\n                case COLOR_HSB:\n                    rgb = ColorUtil.hsbToRgb( this.hue, this.saturation, this.brightness );\n                    cie = ColorUtil.getXYPointFromRGB( rgb[ 0 ], rgb[ 1 ], rgb[ 2 ] );\n                    // We already know the brightness :-)\n                    break;\n                case COLOR_CT:\n                    rgb = ColorUtil.miredToRgb( this.temperature, this.brightness );\n                    cie = ColorUtil.getXYPointFromRGB( rgb[ 0 ], rgb[ 1 ], rgb[ 2 ] );\n                    break;\n                default:\n                    throw new Error( 'Unable to process color, original is ' + this.originalColor );\n            }\n        }\n\n        if ( null !== cie.x ) {\n            this.x = cie.x;\n            this.y = cie.y;\n        }\n\n        return [ this.x, this.y, this.brightness ];\n    }\n\n    /**\n     * Converts the color to HSB.\n     * @returns {Number[]}\n     */\n    toHsb() {\n        let hsb = [ null, null, null ];\n        if ( null === this.hue || null === this.saturation ) {\n            let rgb = this.toRgb();\n            hsb = ColorUtil.rgbToHsb( rgb[ 0 ], rgb[ 1 ], rgb[ 2 ] );\n        }\n\n        // Hue can be null-ish, so check saturation instead.\n        if ( null !== hsb[ 1 ] ) {\n            this.hue = hsb[ 0 ];\n            this.saturation = hsb[ 1 ];\n            this.brightness = hsb[ 2 ];\n        }\n        return [ this.hue, this.saturation, this.brightness ];\n    }\n\n    toCt() {\n        if ( COLOR_CT !== this.originalColor ) {\n            return undefined;\n        } else {\n            return this.temperature;\n        }\n    }\n}\n"],"names":["XYPoint","x","y","XYUtil","p1","p2","start","end","point","AP","AB","ab2","ap_ab","t","dx","dy","Math","sqrt","Red","Lime","Blue","fitIntoRange","number","max","floor","ColorUtil","v1","v2","q","s","crossProduct","pAB","getClosestPointOnLine","pAC","pBC","dAB","getDistanceBetweenTwoPoints","dAC","dBC","lowest","closestPoint","hex","parseInt","substring","replace","hexToRed","hexToGreen","hexToBlue","component","toString","length","red","green","blue","redHex","componentToHex","greenHex","blueHex","hue","saturation","brightness","huePartial","sector","fractionalHue","p","round","min","delta","undefined","xyPoint","isInLampsReach","getClosestReproduciblePoint","Y","X","Z","rgb","map","pow","miredColorTemperature","kelvin","log","result","value","r","g","b","cx","cy","isNaN","inReachOfLamps","COLOR_RGB","COLOR_CIE","COLOR_CT","COLOR_HSB","HueColor","temperature","originalColor","getRGBFromXYAndBrightness","hsbToRgb","miredToRgb","Error","toRgb","rgbToHex","cie","getXYPointFromRGB","getBrightnessFromRgb","hsb","rgbToHsb","color","colorTemperature","hexToRGB","fromRgb"],"mappings":"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"}